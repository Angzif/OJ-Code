#ifndef QOI_FORMAT_CODEC_QOI_H_
#define QOI_FORMAT_CODEC_QOI_H_

#include "utils.h"

constexpr uint8_t QOI_OP_INDEX_TAG = 0x00;
constexpr uint8_t QOI_OP_DIFF_TAG = 0x40;
constexpr uint8_t QOI_OP_LUMA_TAG = 0x80;
constexpr uint8_t QOI_OP_RUN_TAG = 0xc0;
constexpr uint8_t QOI_OP_RGB_TAG = 0xfe;
constexpr uint8_t QOI_OP_RGBA_TAG = 0xff;
constexpr uint8_t QOI_PADDING[8] = {0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u};
constexpr uint8_t QOI_MASK_2 = 0xc0;

/**
 * @brief encode the raw pixel data of an image to qoi format.
 *
 * @param[in] width image width in pixels
 * @param[in] height image height in pixels
 * @param[in] channels number of color channels, 3 = RGB, 4 = RGBA
 * @param[in] colorspace image color space, 0 = sRGB with linear alpha, 1 = all channels linear
 *
 * @return bool true if it is a valid qoi format image, false otherwise
 */
bool QoiEncode(uint32_t width, uint32_t height, uint8_t channels, uint8_t colorspace = 0);

/**
 * @brief decode the qoi format of an image to raw pixel data
 *
 * @param[out] width image width in pixels
 * @param[out] height image height in pixels
 * @param[out] channels number of color channels, 3 = RGB, 4 = RGBA
 * @param[out] colorspace image color space, 0 = sRGB with linear alpha, 1 = all channels linear
 *
 * @return bool true if it is a valid qoi format image, false otherwise
 */
bool QoiDecode(uint32_t &width, uint32_t &height, uint8_t &channels, uint8_t &colorspace);


bool QoiEncode(uint32_t width, uint32_t height, uint8_t channels, uint8_t colorspace) {

    // qoi-header part

    // write magic bytes "qoif"
    QoiWriteChar('q');
    QoiWriteChar('o');
    QoiWriteChar('i');
    QoiWriteChar('f');
    // write image width
    QoiWriteU32(width);
    // write image height
    QoiWriteU32(height);
    // write channel number
    QoiWriteU8(channels);
    // write color space specifier
    QoiWriteU8(colorspace);

    /* qoi-data part */
    int run = 0;
    int px_num = width * height;

    uint8_t history[64][4];
    memset(history, 0, sizeof(history));

    uint8_t r, g, b, a;
    a = 255u;
    uint8_t pre_r, pre_g, pre_b, pre_a;
    pre_r = 0u;
    pre_g = 0u;
    pre_b = 0u;
    pre_a = 255u;
    int sgn[64] = {0};

    for (int i = 0; i < px_num; ++i) {
        r = QoiReadU8();
        g = QoiReadU8();
        b = QoiReadU8();
        if (channels == 4) a = QoiReadU8();

        // TODO
        uint8_t index;
        index = QoiColorHash(r, g, b, a);
        int8_t dg, dr, db;
        dg = g - pre_g;
        dr = r - pre_r;
        db = b - pre_b;
        //run->index->diff->luma->rgb(a)
        //run
        if (r == pre_r && g == pre_g && b == pre_b) {
            run++;
            if (run == 62) {
                QoiWriteU8(QOI_OP_RUN_TAG + (run - 1));
                run = 0;
            }
        } else {
            if (run != 0) {
                QoiWriteU8(QOI_OP_RUN_TAG + (run - 1));
                run = 0;
            }
            // index and other modes
            if (r == history[index][0] && g == history[index][1] && b == history[index][2] && history[index][3] == a) {
                QoiWriteU8(QOI_OP_INDEX_TAG | index);
            } else {
                if ((dr >= -2 && dr <= 1) && (dg >= -2 && dg <= 1) && (db >= -2 && db <= 1)) {//diff
                    QoiWriteU8(QOI_OP_DIFF_TAG + ((dr + 2) << 4)
                               + ((dg + 2) << 2)
                               + (db + 2));
                    history[index][0] = r;
                    history[index][1] = g;
                    history[index][2] = b;
                    history[index][3] = a;
                    pre_r = r;
                    pre_g = g;
                    pre_b = b;
                    continue;
                }
                if (((dr - dg) >= -8 && (dr - dg) <= 7) && (dg >= -32 && dg <= 31) &&
                    ((db - dg) >= -8 && (db - dg) <= 7)) { //luma
                    QoiWriteU8(QOI_OP_LUMA_TAG + (dg + 32));
                    QoiWriteU8(((dr - dg + 8) << 4) + (db - dg + 8));
                    history[index][0] = r;
                    history[index][1] = g;
                    history[index][2] = b;
                    history[index][3] = a;
                    pre_r = r;
                    pre_g = g;
                    pre_b = b;
                    continue;
                }
                if (a == pre_a) {//rgb
                    QoiWriteU8(QOI_OP_RGB_TAG);
                    QoiWriteU8(r);
                    QoiWriteU8(g);
                    QoiWriteU8(b);
                } else { //rgb(a)
                    QoiWriteU8(QOI_OP_RGBA_TAG);
                    QoiWriteU8(r);
                    QoiWriteU8(g);
                    QoiWriteU8(b);
                    QoiWriteU8(a);
                }
            }
        }
        history[index][0] = r;//renew the data
        history[index][1] = g;
        history[index][2] = b;
        history[index][3] = a;
        pre_r = r;
        pre_g = g;
        pre_b = b;
        if (channels == 4) pre_a = a;
    }
    //to avoid the station that when the program ends while the run != 0 which means there are some data doesn't be output
    if (run != 0) {
        QoiWriteU8(QOI_OP_RUN_TAG + (run - 1));
    }

    // qoi-padding part
    for (int i = 0; i < sizeof(QOI_PADDING) / sizeof(QOI_PADDING[0]); ++i) {
        QoiWriteU8(QOI_PADDING[i]);
    }

    return true;
}

bool QoiDecode(uint32_t &width, uint32_t &height, uint8_t &channels, uint8_t &colorspace) {

    char c1 = QoiReadChar();
    char c2 = QoiReadChar();
    char c3 = QoiReadChar();
    char c4 = QoiReadChar();
    if (c1 != 'q' || c2 != 'o' || c3 != 'i' || c4 != 'f') {
        return false;
    }

    // read image width
    width = QoiReadU32();
    // read image height
    height = QoiReadU32();
    // read channel number
    channels = QoiReadU8();
    // read color space specifier
    colorspace = QoiReadU8();

    int run = 0;
    int px_num = width * height;

    uint8_t history[64][4];
    memset(history, 0, sizeof(history));

    uint8_t r = 0u, g = 0u, b = 0u, a = 0u;
    a = 255u;


    for (int i = 0; i < px_num; ++i) {

        // TODO
        int8_t index;
        uint8_t tag;
        int8_t dr, dg, db;
        //start from run mode since the run mode need to operated more than once
        if (run != 0) {                                 //run or non-run
            run--;
        } else {
            tag = QoiReadU8();
            if (tag == QOI_OP_RGB_TAG) { // RGB
                r = QoiReadU8();
                g = QoiReadU8();
                b = QoiReadU8();
            } else if (tag == QOI_OP_RGBA_TAG) { // RGBA
                r = QoiReadU8();
                g = QoiReadU8();
                b = QoiReadU8();
                a = QoiReadU8(); //the RGB has the same bits with run.attention
            } else if ((tag & QOI_MASK_2) == QOI_OP_RUN_TAG) {
                run = tag & 63u;//run = tag & 00011111
            } else if ((tag & QOI_MASK_2) == QOI_OP_INDEX_TAG) {//tag = tag & 192(QOI_MASK)
                index = tag & 63u;
                r = history[index][0];
                g = history[index][1];
                b = history[index][2];
                a = history[index][3];
            } else if ((tag & QOI_MASK_2) == QOI_OP_DIFF_TAG) {
                r = r + ((tag & 48u) >> 4) - 2;
                g = g + ((tag & 12u) >> 2) - 2;
                b = b + (tag & 3u) - 2;
            } else if ((tag & QOI_MASK_2) == QOI_OP_LUMA_TAG) {
                dg = (tag & 63u) - 32;   // 63 = 011111
                uint8_t byte = QoiReadU8();
                dr = dg + ((byte & 240u) >> 4) - 8;//240 = 11110000
                db = dg + (byte & 15u) - 8;//15 = 00001111
                r += dr;
                g += dg;
                b += db;
            }

            index = QoiColorHash(r, g, b, a);
            history[index][0] = r;
            history[index][1] = g;
            history[index][2] = b;
            history[index][3] = a;
        }

        QoiWriteU8(r);
        QoiWriteU8(g);
        QoiWriteU8(b);
        if (channels == 4) QoiWriteU8(a);
    }

    bool valid = true;
    for (int i = 0; i < sizeof(QOI_PADDING) / sizeof(QOI_PADDING[0]); ++i) {
        if (QoiReadU8() != QOI_PADDING[i]) valid = false;
    }

    return valid;
}

#endif // QOI_FORMAT_CODEC_QOI_H_
//参考材料：https://www.bilibili.com/read/cv17617178/
//        https://zhuanlan.zhihu.com/p/451184830
//        https://phoboslab.org/log/2021/11/qoi-fast-lossless-image-compression
